<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--  指向父工程  -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <!--  父模块打包类型必须为pom  -->
    <packaging>pom</packaging>

    <!--  在properties中统一控制依赖包的版本  -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <jedis.version>2.9.0</jedis.version>
    </properties>

    <groupId>com.kevin</groupId>
    <artifactId>springboot-data-backend</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <name>BACKEND-PARENT</name>
    <description>Demo project for Spring Boot</description>

    <!--  管理子模块  -->
    <modules>
        <!--  Spring Boot commons  -->
        <module>springboot-commons</module>
        <!--  Spring Boot 快速入门  -->
        <module>springboot-quickstart</module>
    </modules>

    <!--dependencyManagement用于管理依赖版本号-->
    <dependencyManagement>
        <!-- 删除spring-boot-starter和spring-boot-starter-test，
            因为parent中继承的祖先中已经有了,并且一般dependencyManagement管理的依赖都要写版本号 -->
        <!--<dependency>-->
        <!--<groupId>org.springframework.boot</groupId>-->
        <!--<artifactId>spring-boot-starter</artifactId>-->
        <!--</dependency>-->

        <!--<dependency>-->
        <!--<groupId>org.springframework.boot</groupId>-->
        <!--<artifactId>spring-boot-starter-test</artifactId>-->
        <!--<scope>test</scope>-->
        <!--</dependency>-->


        <!-- 管理依赖关系  -->
        <dependencies>
        </dependencies>
    </dependencyManagement>


    <!--该插件作用是打一个可运行的包，必须要写在需要打包的项目里。这里的父模块不需要打包运行，所以删掉该插件。-->
    <!--    <build>-->
    <!--        <plugins>-->
    <!--            <plugin>-->
    <!--                <groupId>org.springframework.boot</groupId>-->
    <!--                <artifactId>spring-boot-maven-plugin</artifactId>-->
    <!--            </plugin>-->
    <!--        </plugins>-->
    <!--    </build>-->


    <!--
        maven父工程必须遵循以下两点要求:
        1.packaging标签的文本内容必须设置pom
        2.src目录要删除掉
    -->
    <!--
        packaging标签是指定打包的方式,如果pom文件中没有packaging标签,默认为jar
        pom是项目对象模型(Project Object Module),该文件是可以被子模块继承的
        maven多模块管理 就是让它的子模块pom文件来继承父模块的pom
     -->
    <!--
        dependencyManagement
        主要管理版本
        只是声明依赖,并不实现引入,因此子项目需要显示的声明需要用的依赖。
        如果不在子项目中声明依赖,是不会从父项目中继承下来的;
        只有在子项目中写了该依赖项,并且没有指定具体版本,才会从父项目中继承该项;
        并且version和scope都读取自父pom;
        另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。
     -->
    <!--
        dependencies
        管理的是依赖关系
        即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）
        父工程添加的依赖都会自动引入 并默认被所有的子模块继承
     -->
</project>